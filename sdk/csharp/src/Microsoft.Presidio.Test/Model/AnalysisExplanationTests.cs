/* 
 * Presidio
 *
 * Context aware, pluggable and customizable PII anonymization service for text and images.
 *
 * OpenAPI spec version: 2.0
 * Contact: presidio@microsoft.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using NUnit.Framework;

using System;
using System.Linq;
using System.IO;
using System.Collections.Generic;
using Microsoft.Presidio.Api;
using Microsoft.Presidio.Model;
using Microsoft.Presidio.Client;
using System.Reflection;
using Newtonsoft.Json;

namespace Microsoft.Presidio.Test
{
    /// <summary>
    ///  Class for testing AnalysisExplanation
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the model.
    /// </remarks>
    [TestFixture]
    public class AnalysisExplanationTests
    {
        // TODO uncomment below to declare an instance variable for AnalysisExplanation
        private AnalysisExplanation instance;

        /// <summary>
        /// Setup before each test
        /// </summary>
        [SetUp]
        public void Init()
        {
            // TODO uncomment below to create an instance of AnalysisExplanation
            instance = new AnalysisExplanation(recognizer:"recognizer", patternName:"patternName", pattern: "pattern",
                originalScore:0.5, score:0.4, textualExplanation: "explanation", scoreContextImprovement:0.2, supportiveContextWord:"word",
                validationResult:0.1);
        }

        /// <summary>
        /// Clean up after each test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of AnalysisExplanation
        /// </summary>
        [Test]
        public void AnalysisExplanationInstanceTest()
        {
            // TODO uncomment below to test "IsInstanceOfType" AnalysisExplanation
            Assert.IsInstanceOfType(typeof(AnalysisExplanation), instance, "variable 'instance' is a AnalysisExplanation");
        }


        /// <summary>
        /// Test the property 'Recognizer'
        /// </summary>
        [Test]
        public void RecognizerTest()
        {
            Assert.IsTrue(instance.Recognizer == "recognizer");
        }
        /// <summary>
        /// Test the property 'PatternName'
        /// </summary>
        [Test]
        public void PatternNameTest()
        {
            Assert.IsTrue(instance.PatternName == "patternName");
        }
        /// <summary>
        /// Test the property 'Pattern'
        /// </summary>
        [Test]
        public void PatternTest()
        {
            Assert.IsTrue(instance.Pattern == "pattern");
        }
        /// <summary>
        /// Test the property 'OriginalScore'
        /// </summary>
        [Test]
        public void OriginalScoreTest()
        {
            Assert.IsTrue(instance.OriginalScore == 0.5);
        }
        /// <summary>
        /// Test the property 'Score'
        /// </summary>
        [Test]
        public void ScoreTest()
        {
            Assert.IsTrue(instance.Score == 0.4);
            // TODO unit test for the property 'Score'
        }
        /// <summary>
        /// Test the property 'TextualExplanation'
        /// </summary>
        [Test]
        public void TextualExplanationTest()
        {
            Assert.IsTrue(instance.TextualExplanation == "explanation");
        }
        /// <summary>
        /// Test the property 'ScoreContextImprovement'
        /// </summary>
        [Test]
        public void ScoreContextImprovementTest()
        {
            Assert.IsTrue(instance.ScoreContextImprovement == 0.2);
        }
        /// <summary>
        /// Test the property 'SupportiveContextWord'
        /// </summary>
        [Test]
        public void SupportiveContextWordTest()
        {
            Assert.IsTrue(instance.SupportiveContextWord == "word");
        }
        /// <summary>
        /// Test the property 'ValidationResult'
        /// </summary>
        [Test]
        public void ValidationResultTest()
        {
            Assert.IsTrue(instance.ValidationResult == 0.1);
        }

    }

}
