/* 
 * Presidio
 *
 * Context aware, pluggable and customizable PII anonymization service for text and images.
 *
 * OpenAPI spec version: 2.0
 * Contact: presidio@microsoft.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using NUnit.Framework;
using System;
using System.Linq;
using System.IO;
using System.Collections.Generic;
using Microsoft.Presidio.Api;
using Microsoft.Presidio.Model;
using Microsoft.Presidio.Client;
using System.Reflection;
using Newtonsoft.Json;

namespace Microsoft.Presidio.Test
{
    /// <summary>
    ///  Class for testing AnonymizeRequest
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the model.
    /// </remarks>
    [TestFixture]
    public class AnonymizeRequestTests
    {
        private AnonymizeRequest instance;
        private List<RecognizerResult> results;
        private Dictionary<string, object> anonymizers;

        /// <summary>
        /// Setup before each test
        /// </summary>
        [SetUp]
        public void Init()
        {
            var encrypt = new Replace("replace", "val");
            anonymizers = new Dictionary<string, object>() {{"PERSON", encrypt}};
            var result = new RecognizerResult(start: 11, end: 24, score: 0.9, entityType: "PERSON");
            results = new List<RecognizerResult>() {result};
            instance = new AnonymizeRequest(text: "hello world", anonymizers: anonymizers, analyzerResults: results);
        }

        /// <summary>
        /// Clean up after each test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {
        }

        /// <summary>
        /// Test an instance of AnonymizeRequest
        /// </summary>
        [Test]
        public void AnonymizeRequestInstanceTest()
        {
            Assert.IsInstanceOfType(typeof(AnonymizeRequest), instance, "variable 'instance' is a AnonymizeRequest");
        }


        /// <summary>
        /// Test the property 'Text'
        /// </summary>
        [Test]
        public void TextTest()
        {
            Assert.IsTrue(instance.Text == "hello world");
        }

        /// <summary>
        /// Test the property 'Anonymizers'
        /// </summary>
        [Test]
        public void AnonymizersTest()
        {
            Assert.IsTrue(instance.Anonymizers == anonymizers);
        }

        /// <summary>
        /// Test the property 'AnalyzerResults'
        /// </summary>
        [Test]
        public void AnalyzerResultsTest()
        {
            Assert.IsTrue(instance.AnalyzerResults == results);
        }
    }
}