/*
 * Presidio
 *
 * Context aware, pluggable and customizable PII anonymization service for text and images.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: presidio@microsoft.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using Xunit;

using System;
using System.Linq;
using System.IO;
using System.Collections.Generic;
using Presidio.Api;
using Presidio.Model;
using Presidio.Client;
using System.Reflection;
using Newtonsoft.Json;

namespace Presidio.Test.Model
{
    /// <summary>
    ///  Class for testing AnonymizeResponse
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the model.
    /// </remarks>
    public class AnonymizeResponseTests : IDisposable
    {

        private AnonymizeResponse instance;
        private List<OperatorEntity> entities;

        public AnonymizeResponseTests()
        {
             var operatorEntity = new OperatorEntity(_operator: "hash", entityType: "PERSON", start: 10, end: 12,
                text: "hello");
            entities = new List<OperatorEntity>() { operatorEntity };
            instance = new AnonymizeResponse(text:"hello world", items: entities);
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of AnonymizeResponse
        /// </summary>
        [Fact]
        public void AnonymizeResponseInstanceTest()
        {
            Assert.IsType<AnonymizeResponse>(instance);
        }


        /// <summary>
        /// Test the property 'Text'
        /// </summary>
        [Fact]
        public void TextTest()
        {
            Assert.Equal(instance.Text, "hello world");
        }
        /// <summary>
        /// Test the property 'Items'
        /// </summary>
        [Fact]
        public void ItemsTest()
        {
            Assert.Equal(instance.Items, entities);
        }

    }

}