/*
 * Presidio
 *
 * Context aware, pluggable and customizable PII anonymization service for text and images.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: presidio@microsoft.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using Xunit;

using Presidio.Client;
using Presidio.Api;
using Presidio.Model;

namespace Presidio.Test.Api
{
    /// <summary>
    ///  Class for testing AnalyzerApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class AnalyzerApiTests : IDisposable
    {
        private AnalyzerApi instance;

        public AnalyzerApiTests()
        {
            instance = new AnalyzerApi("http://127.0.0.1:3000/");
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of AnalyzerApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            Assert.IsType<AnalyzerApi>(instance);
        }

        /// <summary>
        /// Test AnalyzePost
        /// </summary>
        [Fact]
         public void AnalyzePostTest()
        {
            AnalyzeRequest body =
                new AnalyzeRequest(text: "My name is Inigo Montoya, you killed my father, prepare to die.",
                    language: "en");
            var response = instance.AnalyzePost(body);
            Assert.Equal(response.Count, 1);
            Assert.IsType<List<RecognizerResultWithAnalysis>>(response);
        }

        /// <summary>
        /// Test HealthGet
        /// </summary>
        [Fact]
        public void HealthGetTest()
        {
            var response = instance.HealthGet();
            Assert.IsType<string>(response);
        }

        /// <summary>
        /// Test RecognizersGet
        /// </summary>
        [Fact]
        public void RecognizersGetTest()
        {
            string language = "en";
            var response = instance.RecognizersGet(language);
            Assert.IsType<List<string>>(response);
        }


        /// <summary>
        /// Test SupportedentitiesGet
        /// </summary>
        [Fact]
        public void SupportedentitiesGetTest()
        {
            string language = null;
            var response = instance.SupportedentitiesGet(language);
            Assert.IsType<List<string>>(response);
        }
    }
}