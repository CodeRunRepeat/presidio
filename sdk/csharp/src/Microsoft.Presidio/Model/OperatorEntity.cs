/*
 * Presidio
 *
 * Context aware, pluggable and customizable PII anonymization service for text and images.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: presidio@microsoft.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Microsoft.Presidio.Client.OpenAPIDateConverter;

namespace Microsoft.Presidio.Model
{
    /// <summary>
    /// OperatorEntity
    /// </summary>
    [DataContract(Name = "OperatorEntity")]
    public partial class OperatorEntity : IEquatable<OperatorEntity>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="OperatorEntity" /> class.
        /// </summary>
        /// <param name="_operator">Name of the used operator.</param>
        /// <param name="entityType">Type of the PII entity.</param>
        /// <param name="start">Start index of the changed text.</param>
        /// <param name="end">End index in the changed text.</param>
        /// <param name="text">The new text returned.</param>
        public OperatorEntity(string _operator = default(string), string entityType = default(string), int start = default(int), int end = default(int), string text = default(string))
        {
            this.Operator = _operator;
            this.EntityType = entityType;
            this.Start = start;
            this.End = end;
            this.Text = text;
        }

        /// <summary>
        /// Name of the used operator
        /// </summary>
        /// <value>Name of the used operator</value>
        [DataMember(Name = "operator", EmitDefaultValue = false)]
        public string Operator { get; set; }

        /// <summary>
        /// Type of the PII entity
        /// </summary>
        /// <value>Type of the PII entity</value>
        [DataMember(Name = "entity_type", EmitDefaultValue = false)]
        public string EntityType { get; set; }

        /// <summary>
        /// Start index of the changed text
        /// </summary>
        /// <value>Start index of the changed text</value>
        [DataMember(Name = "start", EmitDefaultValue = false)]
        public int Start { get; set; }

        /// <summary>
        /// End index in the changed text
        /// </summary>
        /// <value>End index in the changed text</value>
        [DataMember(Name = "end", EmitDefaultValue = false)]
        public int End { get; set; }

        /// <summary>
        /// The new text returned
        /// </summary>
        /// <value>The new text returned</value>
        [DataMember(Name = "text", EmitDefaultValue = false)]
        public string Text { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class OperatorEntity {\n");
            sb.Append("  Operator: ").Append(Operator).Append("\n");
            sb.Append("  EntityType: ").Append(EntityType).Append("\n");
            sb.Append("  Start: ").Append(Start).Append("\n");
            sb.Append("  End: ").Append(End).Append("\n");
            sb.Append("  Text: ").Append(Text).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as OperatorEntity);
        }

        /// <summary>
        /// Returns true if OperatorEntity instances are equal
        /// </summary>
        /// <param name="input">Instance of OperatorEntity to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OperatorEntity input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Operator == input.Operator ||
                    (this.Operator != null &&
                    this.Operator.Equals(input.Operator))
                ) && 
                (
                    this.EntityType == input.EntityType ||
                    (this.EntityType != null &&
                    this.EntityType.Equals(input.EntityType))
                ) && 
                (
                    this.Start == input.Start ||
                    this.Start.Equals(input.Start)
                ) && 
                (
                    this.End == input.End ||
                    this.End.Equals(input.End)
                ) && 
                (
                    this.Text == input.Text ||
                    (this.Text != null &&
                    this.Text.Equals(input.Text))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Operator != null)
                    hashCode = hashCode * 59 + this.Operator.GetHashCode();
                if (this.EntityType != null)
                    hashCode = hashCode * 59 + this.EntityType.GetHashCode();
                hashCode = hashCode * 59 + this.Start.GetHashCode();
                hashCode = hashCode * 59 + this.End.GetHashCode();
                if (this.Text != null)
                    hashCode = hashCode * 59 + this.Text.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
