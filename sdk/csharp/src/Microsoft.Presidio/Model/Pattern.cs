/*
 * Presidio
 *
 * Context aware, pluggable and customizable PII anonymization service for text and images.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: presidio@microsoft.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Microsoft.Presidio.Client.OpenAPIDateConverter;

namespace Microsoft.Presidio.Model
{
    /// <summary>
    /// Pattern
    /// </summary>
    [DataContract(Name = "Pattern")]
    public partial class Pattern : IEquatable<Pattern>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Pattern" /> class.
        /// </summary>
        /// <param name="name">Name of regular expression pattern.</param>
        /// <param name="regex">Regex pattern string.</param>
        /// <param name="score">Detection confidence of this pattern (0.01 if very noisy, 0.6-1.0 if very specific).</param>
        public Pattern(string name = default(string), string regex = default(string), double score = default(double))
        {
            this.Name = name;
            this.Regex = regex;
            this.Score = score;
        }

        /// <summary>
        /// Name of regular expression pattern
        /// </summary>
        /// <value>Name of regular expression pattern</value>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// Regex pattern string
        /// </summary>
        /// <value>Regex pattern string</value>
        [DataMember(Name = "regex", EmitDefaultValue = false)]
        public string Regex { get; set; }

        /// <summary>
        /// Detection confidence of this pattern (0.01 if very noisy, 0.6-1.0 if very specific)
        /// </summary>
        /// <value>Detection confidence of this pattern (0.01 if very noisy, 0.6-1.0 if very specific)</value>
        [DataMember(Name = "score", EmitDefaultValue = false)]
        public double Score { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Pattern {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Regex: ").Append(Regex).Append("\n");
            sb.Append("  Score: ").Append(Score).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Pattern);
        }

        /// <summary>
        /// Returns true if Pattern instances are equal
        /// </summary>
        /// <param name="input">Instance of Pattern to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Pattern input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Regex == input.Regex ||
                    (this.Regex != null &&
                    this.Regex.Equals(input.Regex))
                ) && 
                (
                    this.Score == input.Score ||
                    this.Score.Equals(input.Score)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Regex != null)
                    hashCode = hashCode * 59 + this.Regex.GetHashCode();
                hashCode = hashCode * 59 + this.Score.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
