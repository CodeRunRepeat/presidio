/* 
 * Presidio
 *
 * Context aware, pluggable and customizable PII anonymization service for text and images.
 *
 * OpenAPI spec version: 2.0
 * Contact: presidio@microsoft.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using Microsoft.Presidio.Client;
using Microsoft.Presidio.Model;

namespace Microsoft.Presidio.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public interface IAnalyzerApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Analyze Text
        /// </summary>
        /// <remarks>
        /// Recognizes PII entities in a given text and returns their types, locations and score
        /// </remarks>
        /// <exception cref="Microsoft.Presidio.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>List&lt;RecognizerResultWithAnaysisExplanation&gt;</returns>
        List<RecognizerResultWithAnaysisExplanation> AnalyzePost (AnalyzeRequest body);

        /// <summary>
        /// Analyze Text
        /// </summary>
        /// <remarks>
        /// Recognizes PII entities in a given text and returns their types, locations and score
        /// </remarks>
        /// <exception cref="Microsoft.Presidio.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of List&lt;RecognizerResultWithAnaysisExplanation&gt;</returns>
        ApiResponse<List<RecognizerResultWithAnaysisExplanation>> AnalyzePostWithHttpInfo (AnalyzeRequest body);
        /// <summary>
        /// Healthcheck
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Microsoft.Presidio.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>string</returns>
        string HealthGet ();

        /// <summary>
        /// Healthcheck
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Microsoft.Presidio.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> HealthGetWithHttpInfo ();
        /// <summary>
        /// Get Recognizers
        /// </summary>
        /// <remarks>
        /// Get the available PII recognizers for a given language
        /// </remarks>
        /// <exception cref="Microsoft.Presidio.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="language">Two characters for the desired language in ISO_639-1 format (optional)</param>
        /// <returns>List&lt;string&gt;</returns>
        List<string> RecognizersGet (string language = null);

        /// <summary>
        /// Get Recognizers
        /// </summary>
        /// <remarks>
        /// Get the available PII recognizers for a given language
        /// </remarks>
        /// <exception cref="Microsoft.Presidio.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="language">Two characters for the desired language in ISO_639-1 format (optional)</param>
        /// <returns>ApiResponse of List&lt;string&gt;</returns>
        ApiResponse<List<string>> RecognizersGetWithHttpInfo (string language = null);
        /// <summary>
        /// Get supported entities
        /// </summary>
        /// <remarks>
        /// Get the list of PII entities Presidio-Analyzer is capable of detecting
        /// </remarks>
        /// <exception cref="Microsoft.Presidio.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="language">Two characters for the desired language in ISO_639-1 format (optional)</param>
        /// <returns>List&lt;string&gt;</returns>
        List<string> SupportedentitiesGet (string language = null);

        /// <summary>
        /// Get supported entities
        /// </summary>
        /// <remarks>
        /// Get the list of PII entities Presidio-Analyzer is capable of detecting
        /// </remarks>
        /// <exception cref="Microsoft.Presidio.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="language">Two characters for the desired language in ISO_639-1 format (optional)</param>
        /// <returns>ApiResponse of List&lt;string&gt;</returns>
        ApiResponse<List<string>> SupportedentitiesGetWithHttpInfo (string language = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Analyze Text
        /// </summary>
        /// <remarks>
        /// Recognizes PII entities in a given text and returns their types, locations and score
        /// </remarks>
        /// <exception cref="Microsoft.Presidio.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of List&lt;RecognizerResultWithAnaysisExplanation&gt;</returns>
        System.Threading.Tasks.Task<List<RecognizerResultWithAnaysisExplanation>> AnalyzePostAsync (AnalyzeRequest body);

        /// <summary>
        /// Analyze Text
        /// </summary>
        /// <remarks>
        /// Recognizes PII entities in a given text and returns their types, locations and score
        /// </remarks>
        /// <exception cref="Microsoft.Presidio.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (List&lt;RecognizerResultWithAnaysisExplanation&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<RecognizerResultWithAnaysisExplanation>>> AnalyzePostAsyncWithHttpInfo (AnalyzeRequest body);
        /// <summary>
        /// Healthcheck
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Microsoft.Presidio.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> HealthGetAsync ();

        /// <summary>
        /// Healthcheck
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Microsoft.Presidio.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> HealthGetAsyncWithHttpInfo ();
        /// <summary>
        /// Get Recognizers
        /// </summary>
        /// <remarks>
        /// Get the available PII recognizers for a given language
        /// </remarks>
        /// <exception cref="Microsoft.Presidio.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="language">Two characters for the desired language in ISO_639-1 format (optional)</param>
        /// <returns>Task of List&lt;string&gt;</returns>
        System.Threading.Tasks.Task<List<string>> RecognizersGetAsync (string language = null);

        /// <summary>
        /// Get Recognizers
        /// </summary>
        /// <remarks>
        /// Get the available PII recognizers for a given language
        /// </remarks>
        /// <exception cref="Microsoft.Presidio.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="language">Two characters for the desired language in ISO_639-1 format (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;string&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<string>>> RecognizersGetAsyncWithHttpInfo (string language = null);
        /// <summary>
        /// Get supported entities
        /// </summary>
        /// <remarks>
        /// Get the list of PII entities Presidio-Analyzer is capable of detecting
        /// </remarks>
        /// <exception cref="Microsoft.Presidio.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="language">Two characters for the desired language in ISO_639-1 format (optional)</param>
        /// <returns>Task of List&lt;string&gt;</returns>
        System.Threading.Tasks.Task<List<string>> SupportedentitiesGetAsync (string language = null);

        /// <summary>
        /// Get supported entities
        /// </summary>
        /// <remarks>
        /// Get the list of PII entities Presidio-Analyzer is capable of detecting
        /// </remarks>
        /// <exception cref="Microsoft.Presidio.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="language">Two characters for the desired language in ISO_639-1 format (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;string&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<string>>> SupportedentitiesGetAsyncWithHttpInfo (string language = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public partial class AnalyzerApi : IAnalyzerApi
    {
        private Microsoft.Presidio.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="AnalyzerApi"/> class.
        /// </summary>
        /// <returns></returns>
        public AnalyzerApi(String basePath)
        {
            this.Configuration = new Microsoft.Presidio.Client.Configuration { BasePath = basePath };

            ExceptionFactory = Microsoft.Presidio.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AnalyzerApi"/> class
        /// </summary>
        /// <returns></returns>
        public AnalyzerApi()
        {
            this.Configuration = Microsoft.Presidio.Client.Configuration.Default;

            ExceptionFactory = Microsoft.Presidio.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AnalyzerApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public AnalyzerApi(Microsoft.Presidio.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Microsoft.Presidio.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Microsoft.Presidio.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Microsoft.Presidio.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Microsoft.Presidio.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Analyze Text Recognizes PII entities in a given text and returns their types, locations and score
        /// </summary>
        /// <exception cref="Microsoft.Presidio.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>List&lt;RecognizerResultWithAnaysisExplanation&gt;</returns>
        public List<RecognizerResultWithAnaysisExplanation> AnalyzePost (AnalyzeRequest body)
        {
             ApiResponse<List<RecognizerResultWithAnaysisExplanation>> localVarResponse = AnalyzePostWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Analyze Text Recognizes PII entities in a given text and returns their types, locations and score
        /// </summary>
        /// <exception cref="Microsoft.Presidio.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of List&lt;RecognizerResultWithAnaysisExplanation&gt;</returns>
        public ApiResponse< List<RecognizerResultWithAnaysisExplanation> > AnalyzePostWithHttpInfo (AnalyzeRequest body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling AnalyzerApi->AnalyzePost");

            var localVarPath = "/analyze";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AnalyzePost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<RecognizerResultWithAnaysisExplanation>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<RecognizerResultWithAnaysisExplanation>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<RecognizerResultWithAnaysisExplanation>)));
        }

        /// <summary>
        /// Analyze Text Recognizes PII entities in a given text and returns their types, locations and score
        /// </summary>
        /// <exception cref="Microsoft.Presidio.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of List&lt;RecognizerResultWithAnaysisExplanation&gt;</returns>
        public async System.Threading.Tasks.Task<List<RecognizerResultWithAnaysisExplanation>> AnalyzePostAsync (AnalyzeRequest body)
        {
             ApiResponse<List<RecognizerResultWithAnaysisExplanation>> localVarResponse = await AnalyzePostAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Analyze Text Recognizes PII entities in a given text and returns their types, locations and score
        /// </summary>
        /// <exception cref="Microsoft.Presidio.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (List&lt;RecognizerResultWithAnaysisExplanation&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<RecognizerResultWithAnaysisExplanation>>> AnalyzePostAsyncWithHttpInfo (AnalyzeRequest body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling AnalyzerApi->AnalyzePost");

            var localVarPath = "/analyze";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AnalyzePost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<RecognizerResultWithAnaysisExplanation>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<RecognizerResultWithAnaysisExplanation>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<RecognizerResultWithAnaysisExplanation>)));
        }

        /// <summary>
        /// Healthcheck 
        /// </summary>
        /// <exception cref="Microsoft.Presidio.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>string</returns>
        public string HealthGet ()
        {
             ApiResponse<string> localVarResponse = HealthGetWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Healthcheck 
        /// </summary>
        /// <exception cref="Microsoft.Presidio.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse< string > HealthGetWithHttpInfo ()
        {

            var localVarPath = "/health";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("HealthGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Healthcheck 
        /// </summary>
        /// <exception cref="Microsoft.Presidio.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> HealthGetAsync ()
        {
             ApiResponse<string> localVarResponse = await HealthGetAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Healthcheck 
        /// </summary>
        /// <exception cref="Microsoft.Presidio.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> HealthGetAsyncWithHttpInfo ()
        {

            var localVarPath = "/health";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("HealthGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Get Recognizers Get the available PII recognizers for a given language
        /// </summary>
        /// <exception cref="Microsoft.Presidio.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="language">Two characters for the desired language in ISO_639-1 format (optional)</param>
        /// <returns>List&lt;string&gt;</returns>
        public List<string> RecognizersGet (string language = null)
        {
             ApiResponse<List<string>> localVarResponse = RecognizersGetWithHttpInfo(language);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Recognizers Get the available PII recognizers for a given language
        /// </summary>
        /// <exception cref="Microsoft.Presidio.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="language">Two characters for the desired language in ISO_639-1 format (optional)</param>
        /// <returns>ApiResponse of List&lt;string&gt;</returns>
        public ApiResponse< List<string> > RecognizersGetWithHttpInfo (string language = null)
        {

            var localVarPath = "/recognizers";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (language != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "language", language)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RecognizersGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<string>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<string>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<string>)));
        }

        /// <summary>
        /// Get Recognizers Get the available PII recognizers for a given language
        /// </summary>
        /// <exception cref="Microsoft.Presidio.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="language">Two characters for the desired language in ISO_639-1 format (optional)</param>
        /// <returns>Task of List&lt;string&gt;</returns>
        public async System.Threading.Tasks.Task<List<string>> RecognizersGetAsync (string language = null)
        {
             ApiResponse<List<string>> localVarResponse = await RecognizersGetAsyncWithHttpInfo(language);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Recognizers Get the available PII recognizers for a given language
        /// </summary>
        /// <exception cref="Microsoft.Presidio.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="language">Two characters for the desired language in ISO_639-1 format (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;string&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<string>>> RecognizersGetAsyncWithHttpInfo (string language = null)
        {

            var localVarPath = "/recognizers";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (language != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "language", language)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RecognizersGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<string>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<string>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<string>)));
        }

        /// <summary>
        /// Get supported entities Get the list of PII entities Presidio-Analyzer is capable of detecting
        /// </summary>
        /// <exception cref="Microsoft.Presidio.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="language">Two characters for the desired language in ISO_639-1 format (optional)</param>
        /// <returns>List&lt;string&gt;</returns>
        public List<string> SupportedentitiesGet (string language = null)
        {
             ApiResponse<List<string>> localVarResponse = SupportedentitiesGetWithHttpInfo(language);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get supported entities Get the list of PII entities Presidio-Analyzer is capable of detecting
        /// </summary>
        /// <exception cref="Microsoft.Presidio.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="language">Two characters for the desired language in ISO_639-1 format (optional)</param>
        /// <returns>ApiResponse of List&lt;string&gt;</returns>
        public ApiResponse< List<string> > SupportedentitiesGetWithHttpInfo (string language = null)
        {

            var localVarPath = "/supportedentities";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (language != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "language", language)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SupportedentitiesGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<string>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<string>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<string>)));
        }

        /// <summary>
        /// Get supported entities Get the list of PII entities Presidio-Analyzer is capable of detecting
        /// </summary>
        /// <exception cref="Microsoft.Presidio.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="language">Two characters for the desired language in ISO_639-1 format (optional)</param>
        /// <returns>Task of List&lt;string&gt;</returns>
        public async System.Threading.Tasks.Task<List<string>> SupportedentitiesGetAsync (string language = null)
        {
             ApiResponse<List<string>> localVarResponse = await SupportedentitiesGetAsyncWithHttpInfo(language);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get supported entities Get the list of PII entities Presidio-Analyzer is capable of detecting
        /// </summary>
        /// <exception cref="Microsoft.Presidio.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="language">Two characters for the desired language in ISO_639-1 format (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;string&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<string>>> SupportedentitiesGetAsyncWithHttpInfo (string language = null)
        {

            var localVarPath = "/supportedentities";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (language != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "language", language)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SupportedentitiesGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<string>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<string>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<string>)));
        }

    }
}
