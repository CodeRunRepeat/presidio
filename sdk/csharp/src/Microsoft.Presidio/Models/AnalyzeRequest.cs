/*
 * Presidio
 *
 * Context aware, pluggable and customizable PII anonymization service for text and images.
 *
 * OpenAPI spec version: 2.0
 * Contact: presidio@microsoft.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace Microsoft.Presidio.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class AnalyzeRequest : IEquatable<AnalyzeRequest>
    { 
        /// <summary>
        /// The text to analyze
        /// </summary>
        /// <value>The text to analyze</value>
        [Required]
        [DataMember(Name="text")]
        public string Text { get; set; }

        /// <summary>
        /// Two characters for the desired language in ISO_639-1 format
        /// </summary>
        /// <value>Two characters for the desired language in ISO_639-1 format</value>
        [Required]
        [DataMember(Name="language")]
        public string Language { get; set; }

        /// <summary>
        /// A correlation id to append to headers and traces
        /// </summary>
        /// <value>A correlation id to append to headers and traces</value>
        [DataMember(Name="correlation_id")]
        public string CorrelationId { get; set; }

        /// <summary>
        /// The minimal detection score threshold
        /// </summary>
        /// <value>The minimal detection score threshold</value>
        [DataMember(Name="score_threshold")]
        public double? ScoreThreshold { get; set; }

        /// <summary>
        /// A list of entities to analyze
        /// </summary>
        /// <value>A list of entities to analyze</value>
        [DataMember(Name="entities")]
        public List<string> Entities { get; set; }

        /// <summary>
        /// Whether to include analysis explanation in the response
        /// </summary>
        /// <value>Whether to include analysis explanation in the response</value>
        [DataMember(Name="return_decision_process")]
        public bool? ReturnDecisionProcess { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AnalyzeRequest {\n");
            sb.Append("  Text: ").Append(Text).Append("\n");
            sb.Append("  Language: ").Append(Language).Append("\n");
            sb.Append("  CorrelationId: ").Append(CorrelationId).Append("\n");
            sb.Append("  ScoreThreshold: ").Append(ScoreThreshold).Append("\n");
            sb.Append("  Entities: ").Append(Entities).Append("\n");
            sb.Append("  ReturnDecisionProcess: ").Append(ReturnDecisionProcess).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((AnalyzeRequest)obj);
        }

        /// <summary>
        /// Returns true if AnalyzeRequest instances are equal
        /// </summary>
        /// <param name="other">Instance of AnalyzeRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AnalyzeRequest other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Text == other.Text ||
                    Text != null &&
                    Text.Equals(other.Text)
                ) && 
                (
                    Language == other.Language ||
                    Language != null &&
                    Language.Equals(other.Language)
                ) && 
                (
                    CorrelationId == other.CorrelationId ||
                    CorrelationId != null &&
                    CorrelationId.Equals(other.CorrelationId)
                ) && 
                (
                    ScoreThreshold == other.ScoreThreshold ||
                    ScoreThreshold != null &&
                    ScoreThreshold.Equals(other.ScoreThreshold)
                ) && 
                (
                    Entities == other.Entities ||
                    Entities != null &&
                    Entities.SequenceEqual(other.Entities)
                ) && 
                (
                    ReturnDecisionProcess == other.ReturnDecisionProcess ||
                    ReturnDecisionProcess != null &&
                    ReturnDecisionProcess.Equals(other.ReturnDecisionProcess)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Text != null)
                    hashCode = hashCode * 59 + Text.GetHashCode();
                    if (Language != null)
                    hashCode = hashCode * 59 + Language.GetHashCode();
                    if (CorrelationId != null)
                    hashCode = hashCode * 59 + CorrelationId.GetHashCode();
                    if (ScoreThreshold != null)
                    hashCode = hashCode * 59 + ScoreThreshold.GetHashCode();
                    if (Entities != null)
                    hashCode = hashCode * 59 + Entities.GetHashCode();
                    if (ReturnDecisionProcess != null)
                    hashCode = hashCode * 59 + ReturnDecisionProcess.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(AnalyzeRequest left, AnalyzeRequest right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(AnalyzeRequest left, AnalyzeRequest right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
