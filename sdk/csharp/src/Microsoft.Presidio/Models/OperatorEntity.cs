/*
 * Presidio
 *
 * Context aware, pluggable and customizable PII anonymization service for text and images.
 *
 * OpenAPI spec version: 2.0
 * Contact: presidio@microsoft.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace Microsoft.Presidio.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class OperatorEntity : IEquatable<OperatorEntity>
    { 
        /// <summary>
        /// Name of the used operator
        /// </summary>
        /// <value>Name of the used operator</value>
        [DataMember(Name="operator")]
        public string _Operator { get; set; }

        /// <summary>
        /// Type of the PII entity
        /// </summary>
        /// <value>Type of the PII entity</value>
        [DataMember(Name="entity_type")]
        public string EntityType { get; set; }

        /// <summary>
        /// Start index of the changed text
        /// </summary>
        /// <value>Start index of the changed text</value>
        [DataMember(Name="start")]
        public int? Start { get; set; }

        /// <summary>
        /// End index in the changed text
        /// </summary>
        /// <value>End index in the changed text</value>
        [DataMember(Name="end")]
        public int? End { get; set; }

        /// <summary>
        /// The new text returned
        /// </summary>
        /// <value>The new text returned</value>
        [DataMember(Name="text")]
        public string Text { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class OperatorEntity {\n");
            sb.Append("  _Operator: ").Append(_Operator).Append("\n");
            sb.Append("  EntityType: ").Append(EntityType).Append("\n");
            sb.Append("  Start: ").Append(Start).Append("\n");
            sb.Append("  End: ").Append(End).Append("\n");
            sb.Append("  Text: ").Append(Text).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((OperatorEntity)obj);
        }

        /// <summary>
        /// Returns true if OperatorEntity instances are equal
        /// </summary>
        /// <param name="other">Instance of OperatorEntity to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OperatorEntity other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    _Operator == other._Operator ||
                    _Operator != null &&
                    _Operator.Equals(other._Operator)
                ) && 
                (
                    EntityType == other.EntityType ||
                    EntityType != null &&
                    EntityType.Equals(other.EntityType)
                ) && 
                (
                    Start == other.Start ||
                    Start != null &&
                    Start.Equals(other.Start)
                ) && 
                (
                    End == other.End ||
                    End != null &&
                    End.Equals(other.End)
                ) && 
                (
                    Text == other.Text ||
                    Text != null &&
                    Text.Equals(other.Text)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (_Operator != null)
                    hashCode = hashCode * 59 + _Operator.GetHashCode();
                    if (EntityType != null)
                    hashCode = hashCode * 59 + EntityType.GetHashCode();
                    if (Start != null)
                    hashCode = hashCode * 59 + Start.GetHashCode();
                    if (End != null)
                    hashCode = hashCode * 59 + End.GetHashCode();
                    if (Text != null)
                    hashCode = hashCode * 59 + Text.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(OperatorEntity left, OperatorEntity right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(OperatorEntity left, OperatorEntity right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
