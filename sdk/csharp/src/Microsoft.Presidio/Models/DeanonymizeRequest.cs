/*
 * Presidio
 *
 * Context aware, pluggable and customizable PII anonymization service for text and images.
 *
 * OpenAPI spec version: 2.0
 * Contact: presidio@microsoft.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace Microsoft.Presidio.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class DeanonymizeRequest : IEquatable<DeanonymizeRequest>
    { 
        /// <summary>
        /// The anonymized text
        /// </summary>
        /// <value>The anonymized text</value>
        [Required]
        [DataMember(Name="text")]
        public string Text { get; set; }

        /// <summary>
        /// Object where the key is DEFAULT or the ENTITY_TYPE and the value is decrypt since it is the only one supported
        /// </summary>
        /// <value>Object where the key is DEFAULT or the ENTITY_TYPE and the value is decrypt since it is the only one supported</value>
        [Required]
        [DataMember(Name="deanonymizers")]
        public Object Deanonymizers { get; set; }

        /// <summary>
        /// Array of anonymized PIIs
        /// </summary>
        /// <value>Array of anonymized PIIs</value>
        [Required]
        [DataMember(Name="anonymizer_results")]
        public List<AnonymizerResult> AnonymizerResults { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DeanonymizeRequest {\n");
            sb.Append("  Text: ").Append(Text).Append("\n");
            sb.Append("  Deanonymizers: ").Append(Deanonymizers).Append("\n");
            sb.Append("  AnonymizerResults: ").Append(AnonymizerResults).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((DeanonymizeRequest)obj);
        }

        /// <summary>
        /// Returns true if DeanonymizeRequest instances are equal
        /// </summary>
        /// <param name="other">Instance of DeanonymizeRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DeanonymizeRequest other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Text == other.Text ||
                    Text != null &&
                    Text.Equals(other.Text)
                ) && 
                (
                    Deanonymizers == other.Deanonymizers ||
                    Deanonymizers != null &&
                    Deanonymizers.Equals(other.Deanonymizers)
                ) && 
                (
                    AnonymizerResults == other.AnonymizerResults ||
                    AnonymizerResults != null &&
                    AnonymizerResults.SequenceEqual(other.AnonymizerResults)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Text != null)
                    hashCode = hashCode * 59 + Text.GetHashCode();
                    if (Deanonymizers != null)
                    hashCode = hashCode * 59 + Deanonymizers.GetHashCode();
                    if (AnonymizerResults != null)
                    hashCode = hashCode * 59 + AnonymizerResults.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(DeanonymizeRequest left, DeanonymizeRequest right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(DeanonymizeRequest left, DeanonymizeRequest right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
