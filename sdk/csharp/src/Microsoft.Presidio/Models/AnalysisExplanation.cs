/*
 * Presidio
 *
 * Context aware, pluggable and customizable PII anonymization service for text and images.
 *
 * OpenAPI spec version: 2.0
 * Contact: presidio@microsoft.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace Microsoft.Presidio.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class AnalysisExplanation : IEquatable<AnalysisExplanation>
    { 
        /// <summary>
        /// Name of recognizer that made the decision
        /// </summary>
        /// <value>Name of recognizer that made the decision</value>
        [DataMember(Name="recognizer")]
        public string Recognizer { get; set; }

        /// <summary>
        /// name of pattern (if decision was made by a PatternRecognizer)
        /// </summary>
        /// <value>name of pattern (if decision was made by a PatternRecognizer)</value>
        [DataMember(Name="pattern_name")]
        public string PatternName { get; set; }

        /// <summary>
        /// Regex pattern that was applied (if PatternRecognizer)
        /// </summary>
        /// <value>Regex pattern that was applied (if PatternRecognizer)</value>
        [DataMember(Name="pattern")]
        public string Pattern { get; set; }

        /// <summary>
        /// Recognizer&#x27;s confidence in result
        /// </summary>
        /// <value>Recognizer&#x27;s confidence in result</value>
        [DataMember(Name="original_score")]
        public double? OriginalScore { get; set; }

        /// <summary>
        /// The PII detection score
        /// </summary>
        /// <value>The PII detection score</value>
        [DataMember(Name="score")]
        public double? Score { get; set; }

        /// <summary>
        /// Free text for describing a decision of a logic or model
        /// </summary>
        /// <value>Free text for describing a decision of a logic or model</value>
        [DataMember(Name="textual_explanation")]
        public string TextualExplanation { get; set; }

        /// <summary>
        /// Difference from the original score
        /// </summary>
        /// <value>Difference from the original score</value>
        [DataMember(Name="score_context_improvement")]
        public double? ScoreContextImprovement { get; set; }

        /// <summary>
        /// The context word which helped increase the score
        /// </summary>
        /// <value>The context word which helped increase the score</value>
        [DataMember(Name="supportive_context_word")]
        public string SupportiveContextWord { get; set; }

        /// <summary>
        /// Result of a validation (e.g. checksum)
        /// </summary>
        /// <value>Result of a validation (e.g. checksum)</value>
        [DataMember(Name="validation_result")]
        public double? ValidationResult { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AnalysisExplanation {\n");
            sb.Append("  Recognizer: ").Append(Recognizer).Append("\n");
            sb.Append("  PatternName: ").Append(PatternName).Append("\n");
            sb.Append("  Pattern: ").Append(Pattern).Append("\n");
            sb.Append("  OriginalScore: ").Append(OriginalScore).Append("\n");
            sb.Append("  Score: ").Append(Score).Append("\n");
            sb.Append("  TextualExplanation: ").Append(TextualExplanation).Append("\n");
            sb.Append("  ScoreContextImprovement: ").Append(ScoreContextImprovement).Append("\n");
            sb.Append("  SupportiveContextWord: ").Append(SupportiveContextWord).Append("\n");
            sb.Append("  ValidationResult: ").Append(ValidationResult).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((AnalysisExplanation)obj);
        }

        /// <summary>
        /// Returns true if AnalysisExplanation instances are equal
        /// </summary>
        /// <param name="other">Instance of AnalysisExplanation to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AnalysisExplanation other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Recognizer == other.Recognizer ||
                    Recognizer != null &&
                    Recognizer.Equals(other.Recognizer)
                ) && 
                (
                    PatternName == other.PatternName ||
                    PatternName != null &&
                    PatternName.Equals(other.PatternName)
                ) && 
                (
                    Pattern == other.Pattern ||
                    Pattern != null &&
                    Pattern.Equals(other.Pattern)
                ) && 
                (
                    OriginalScore == other.OriginalScore ||
                    OriginalScore != null &&
                    OriginalScore.Equals(other.OriginalScore)
                ) && 
                (
                    Score == other.Score ||
                    Score != null &&
                    Score.Equals(other.Score)
                ) && 
                (
                    TextualExplanation == other.TextualExplanation ||
                    TextualExplanation != null &&
                    TextualExplanation.Equals(other.TextualExplanation)
                ) && 
                (
                    ScoreContextImprovement == other.ScoreContextImprovement ||
                    ScoreContextImprovement != null &&
                    ScoreContextImprovement.Equals(other.ScoreContextImprovement)
                ) && 
                (
                    SupportiveContextWord == other.SupportiveContextWord ||
                    SupportiveContextWord != null &&
                    SupportiveContextWord.Equals(other.SupportiveContextWord)
                ) && 
                (
                    ValidationResult == other.ValidationResult ||
                    ValidationResult != null &&
                    ValidationResult.Equals(other.ValidationResult)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Recognizer != null)
                    hashCode = hashCode * 59 + Recognizer.GetHashCode();
                    if (PatternName != null)
                    hashCode = hashCode * 59 + PatternName.GetHashCode();
                    if (Pattern != null)
                    hashCode = hashCode * 59 + Pattern.GetHashCode();
                    if (OriginalScore != null)
                    hashCode = hashCode * 59 + OriginalScore.GetHashCode();
                    if (Score != null)
                    hashCode = hashCode * 59 + Score.GetHashCode();
                    if (TextualExplanation != null)
                    hashCode = hashCode * 59 + TextualExplanation.GetHashCode();
                    if (ScoreContextImprovement != null)
                    hashCode = hashCode * 59 + ScoreContextImprovement.GetHashCode();
                    if (SupportiveContextWord != null)
                    hashCode = hashCode * 59 + SupportiveContextWord.GetHashCode();
                    if (ValidationResult != null)
                    hashCode = hashCode * 59 + ValidationResult.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(AnalysisExplanation left, AnalysisExplanation right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(AnalysisExplanation left, AnalysisExplanation right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
