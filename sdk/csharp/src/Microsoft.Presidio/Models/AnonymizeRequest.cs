/*
 * Presidio
 *
 * Context aware, pluggable and customizable PII anonymization service for text and images.
 *
 * OpenAPI spec version: 2.0
 * Contact: presidio@microsoft.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace Microsoft.Presidio.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class AnonymizeRequest : IEquatable<AnonymizeRequest>
    { 
        /// <summary>
        /// The text to anonymize
        /// </summary>
        /// <value>The text to anonymize</value>
        [Required]
        [DataMember(Name="text")]
        public string Text { get; set; }

        /// <summary>
        /// Object where the key is DEFAULT or the ENTITY_TYPE and the value is the anonymizer definition
        /// </summary>
        /// <value>Object where the key is DEFAULT or the ENTITY_TYPE and the value is the anonymizer definition</value>
        [DataMember(Name="anonymizers")]
        public Object Anonymizers { get; set; }

        /// <summary>
        /// Array of analyzer detections
        /// </summary>
        /// <value>Array of analyzer detections</value>
        [Required]
        [DataMember(Name="analyzer_results")]
        public List<RecognizerResult> AnalyzerResults { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AnonymizeRequest {\n");
            sb.Append("  Text: ").Append(Text).Append("\n");
            sb.Append("  Anonymizers: ").Append(Anonymizers).Append("\n");
            sb.Append("  AnalyzerResults: ").Append(AnalyzerResults).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((AnonymizeRequest)obj);
        }

        /// <summary>
        /// Returns true if AnonymizeRequest instances are equal
        /// </summary>
        /// <param name="other">Instance of AnonymizeRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AnonymizeRequest other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Text == other.Text ||
                    Text != null &&
                    Text.Equals(other.Text)
                ) && 
                (
                    Anonymizers == other.Anonymizers ||
                    Anonymizers != null &&
                    Anonymizers.Equals(other.Anonymizers)
                ) && 
                (
                    AnalyzerResults == other.AnalyzerResults ||
                    AnalyzerResults != null &&
                    AnalyzerResults.SequenceEqual(other.AnalyzerResults)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Text != null)
                    hashCode = hashCode * 59 + Text.GetHashCode();
                    if (Anonymizers != null)
                    hashCode = hashCode * 59 + Anonymizers.GetHashCode();
                    if (AnalyzerResults != null)
                    hashCode = hashCode * 59 + AnalyzerResults.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(AnonymizeRequest left, AnonymizeRequest right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(AnonymizeRequest left, AnonymizeRequest right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
