/*
 * Presidio
 *
 * Context aware, pluggable and customizable PII anonymization service for text and images.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: presidio@microsoft.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Presidio.Client;
using Presidio.Model;

namespace Presidio.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAnonymizerApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Anonymize Text
        /// </summary>
        /// <exception cref="Presidio.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="anonymizeRequest"></param>
        /// <returns>AnonymizeResponse</returns>
        AnonymizeResponse AnonymizePost(AnonymizeRequest anonymizeRequest);

        /// <summary>
        /// Anonymize Text
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Presidio.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="anonymizeRequest"></param>
        /// <returns>ApiResponse of AnonymizeResponse</returns>
        ApiResponse<AnonymizeResponse> AnonymizePostWithHttpInfo(AnonymizeRequest anonymizeRequest);
        /// <summary>
        /// Get supported anonymizers
        /// </summary>
        /// <exception cref="Presidio.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;string&gt;</returns>
        List<string> AnonymizersGet();

        /// <summary>
        /// Get supported anonymizers
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Presidio.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;string&gt;</returns>
        ApiResponse<List<string>> AnonymizersGetWithHttpInfo();
        /// <summary>
        /// Get supported deanonymizers
        /// </summary>
        /// <exception cref="Presidio.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;string&gt;</returns>
        List<string> DeanonymizersGet();

        /// <summary>
        /// Get supported deanonymizers
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Presidio.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;string&gt;</returns>
        ApiResponse<List<string>> DeanonymizersGetWithHttpInfo();
        /// <summary>
        /// Healthcheck
        /// </summary>
        /// <exception cref="Presidio.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>string</returns>
        string HealthGet();

        /// <summary>
        /// Healthcheck
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Presidio.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> HealthGetWithHttpInfo();
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAnonymizerApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Anonymize Text
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Presidio.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="anonymizeRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AnonymizeResponse</returns>
        System.Threading.Tasks.Task<AnonymizeResponse> AnonymizePostAsync(AnonymizeRequest anonymizeRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Anonymize Text
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Presidio.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="anonymizeRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AnonymizeResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AnonymizeResponse>> AnonymizePostWithHttpInfoAsync(AnonymizeRequest anonymizeRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get supported anonymizers
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Presidio.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;string&gt;</returns>
        System.Threading.Tasks.Task<List<string>> AnonymizersGetAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get supported anonymizers
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Presidio.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;string&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<string>>> AnonymizersGetWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get supported deanonymizers
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Presidio.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;string&gt;</returns>
        System.Threading.Tasks.Task<List<string>> DeanonymizersGetAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get supported deanonymizers
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Presidio.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;string&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<string>>> DeanonymizersGetWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Healthcheck
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Presidio.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> HealthGetAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Healthcheck
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Presidio.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> HealthGetWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAnonymizerApi : IAnonymizerApiSync, IAnonymizerApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class AnonymizerApi : IAnonymizerApi
    {
        private Presidio.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="AnonymizerApi"/> class.
        /// </summary>
        /// <returns></returns>
        public AnonymizerApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AnonymizerApi"/> class.
        /// </summary>
        /// <returns></returns>
        public AnonymizerApi(String basePath)
        {
            this.Configuration = Presidio.Client.Configuration.MergeConfigurations(
                Presidio.Client.GlobalConfiguration.Instance,
                new Presidio.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Presidio.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Presidio.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Presidio.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AnonymizerApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public AnonymizerApi(Presidio.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Presidio.Client.Configuration.MergeConfigurations(
                Presidio.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Presidio.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Presidio.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Presidio.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AnonymizerApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public AnonymizerApi(Presidio.Client.ISynchronousClient client, Presidio.Client.IAsynchronousClient asyncClient, Presidio.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Presidio.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Presidio.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Presidio.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Presidio.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Presidio.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Anonymize Text 
        /// </summary>
        /// <exception cref="Presidio.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="anonymizeRequest"></param>
        /// <returns>AnonymizeResponse</returns>
        public AnonymizeResponse AnonymizePost(AnonymizeRequest anonymizeRequest)
        {
            Presidio.Client.ApiResponse<AnonymizeResponse> localVarResponse = AnonymizePostWithHttpInfo(anonymizeRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Anonymize Text 
        /// </summary>
        /// <exception cref="Presidio.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="anonymizeRequest"></param>
        /// <returns>ApiResponse of AnonymizeResponse</returns>
        public Presidio.Client.ApiResponse<AnonymizeResponse> AnonymizePostWithHttpInfo(AnonymizeRequest anonymizeRequest)
        {
            // verify the required parameter 'anonymizeRequest' is set
            if (anonymizeRequest == null)
                throw new Presidio.Client.ApiException(400, "Missing required parameter 'anonymizeRequest' when calling AnonymizerApi->AnonymizePost");

            Presidio.Client.RequestOptions localVarRequestOptions = new Presidio.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Presidio.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Presidio.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = anonymizeRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Post<AnonymizeResponse>("/anonymize", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AnonymizePost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Anonymize Text 
        /// </summary>
        /// <exception cref="Presidio.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="anonymizeRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AnonymizeResponse</returns>
        public async System.Threading.Tasks.Task<AnonymizeResponse> AnonymizePostAsync(AnonymizeRequest anonymizeRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Presidio.Client.ApiResponse<AnonymizeResponse> localVarResponse = await AnonymizePostWithHttpInfoAsync(anonymizeRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Anonymize Text 
        /// </summary>
        /// <exception cref="Presidio.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="anonymizeRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AnonymizeResponse)</returns>
        public async System.Threading.Tasks.Task<Presidio.Client.ApiResponse<AnonymizeResponse>> AnonymizePostWithHttpInfoAsync(AnonymizeRequest anonymizeRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'anonymizeRequest' is set
            if (anonymizeRequest == null)
                throw new Presidio.Client.ApiException(400, "Missing required parameter 'anonymizeRequest' when calling AnonymizerApi->AnonymizePost");


            Presidio.Client.RequestOptions localVarRequestOptions = new Presidio.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Presidio.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Presidio.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = anonymizeRequest;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<AnonymizeResponse>("/anonymize", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AnonymizePost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get supported anonymizers 
        /// </summary>
        /// <exception cref="Presidio.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;string&gt;</returns>
        public List<string> AnonymizersGet()
        {
            Presidio.Client.ApiResponse<List<string>> localVarResponse = AnonymizersGetWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get supported anonymizers 
        /// </summary>
        /// <exception cref="Presidio.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;string&gt;</returns>
        public Presidio.Client.ApiResponse<List<string>> AnonymizersGetWithHttpInfo()
        {
            Presidio.Client.RequestOptions localVarRequestOptions = new Presidio.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Presidio.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Presidio.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);



            // make the HTTP request
            var localVarResponse = this.Client.Get<List<string>>("/anonymizers", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AnonymizersGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get supported anonymizers 
        /// </summary>
        /// <exception cref="Presidio.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;string&gt;</returns>
        public async System.Threading.Tasks.Task<List<string>> AnonymizersGetAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Presidio.Client.ApiResponse<List<string>> localVarResponse = await AnonymizersGetWithHttpInfoAsync(cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get supported anonymizers 
        /// </summary>
        /// <exception cref="Presidio.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;string&gt;)</returns>
        public async System.Threading.Tasks.Task<Presidio.Client.ApiResponse<List<string>>> AnonymizersGetWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Presidio.Client.RequestOptions localVarRequestOptions = new Presidio.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Presidio.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Presidio.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);



            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<string>>("/anonymizers", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AnonymizersGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get supported deanonymizers 
        /// </summary>
        /// <exception cref="Presidio.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;string&gt;</returns>
        public List<string> DeanonymizersGet()
        {
            Presidio.Client.ApiResponse<List<string>> localVarResponse = DeanonymizersGetWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get supported deanonymizers 
        /// </summary>
        /// <exception cref="Presidio.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;string&gt;</returns>
        public Presidio.Client.ApiResponse<List<string>> DeanonymizersGetWithHttpInfo()
        {
            Presidio.Client.RequestOptions localVarRequestOptions = new Presidio.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Presidio.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Presidio.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);



            // make the HTTP request
            var localVarResponse = this.Client.Get<List<string>>("/deanonymizers", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeanonymizersGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get supported deanonymizers 
        /// </summary>
        /// <exception cref="Presidio.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;string&gt;</returns>
        public async System.Threading.Tasks.Task<List<string>> DeanonymizersGetAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Presidio.Client.ApiResponse<List<string>> localVarResponse = await DeanonymizersGetWithHttpInfoAsync(cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get supported deanonymizers 
        /// </summary>
        /// <exception cref="Presidio.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;string&gt;)</returns>
        public async System.Threading.Tasks.Task<Presidio.Client.ApiResponse<List<string>>> DeanonymizersGetWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Presidio.Client.RequestOptions localVarRequestOptions = new Presidio.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Presidio.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Presidio.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);



            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<string>>("/deanonymizers", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeanonymizersGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Healthcheck 
        /// </summary>
        /// <exception cref="Presidio.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>string</returns>
        public string HealthGet()
        {
            Presidio.Client.ApiResponse<string> localVarResponse = HealthGetWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// Healthcheck 
        /// </summary>
        /// <exception cref="Presidio.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of string</returns>
        public Presidio.Client.ApiResponse<string> HealthGetWithHttpInfo()
        {
            Presidio.Client.RequestOptions localVarRequestOptions = new Presidio.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "text/plain"
            };

            var localVarContentType = Presidio.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Presidio.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);



            // make the HTTP request
            var localVarResponse = this.Client.Get<string>("/health", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("HealthGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Healthcheck 
        /// </summary>
        /// <exception cref="Presidio.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> HealthGetAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Presidio.Client.ApiResponse<string> localVarResponse = await HealthGetWithHttpInfoAsync(cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Healthcheck 
        /// </summary>
        /// <exception cref="Presidio.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<Presidio.Client.ApiResponse<string>> HealthGetWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Presidio.Client.RequestOptions localVarRequestOptions = new Presidio.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "text/plain"
            };


            var localVarContentType = Presidio.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Presidio.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);



            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<string>("/health", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("HealthGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
