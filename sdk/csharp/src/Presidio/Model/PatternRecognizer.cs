/*
 * Presidio
 *
 * Context aware, pluggable and customizable PII anonymization service for text and images.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: presidio@microsoft.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Presidio.Client.OpenAPIDateConverter;

namespace Presidio.Model
{
    /// <summary>
    /// A regular expressions or deny-list based recognizer
    /// </summary>
    [DataContract(Name = "PatternRecognizer")]
    public partial class PatternRecognizer : IEquatable<PatternRecognizer>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PatternRecognizer" /> class.
        /// </summary>
        /// <param name="name">Name of recognizer.</param>
        /// <param name="supportedLanguage">Language code supported by this recognizer.</param>
        /// <param name="patterns">List of type Pattern containing regex expressions with additional metadata..</param>
        /// <param name="denyList">List of words to be returned as PII if found..</param>
        /// <param name="context">List of words to be used to increase confidence if found in the vicinity of detected entities..</param>
        /// <param name="supportedEntity">The name of entity this ad hoc recognizer detects.</param>
        public PatternRecognizer(string name = default(string), string supportedLanguage = default(string), List<Pattern> patterns = default(List<Pattern>), List<string> denyList = default(List<string>), List<string> context = default(List<string>), string supportedEntity = default(string))
        {
            this.Name = name;
            this.SupportedLanguage = supportedLanguage;
            this.Patterns = patterns;
            this.DenyList = denyList;
            this.Context = context;
            this.SupportedEntity = supportedEntity;
        }

        /// <summary>
        /// Name of recognizer
        /// </summary>
        /// <value>Name of recognizer</value>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// Language code supported by this recognizer
        /// </summary>
        /// <value>Language code supported by this recognizer</value>
        [DataMember(Name = "supported_language", EmitDefaultValue = false)]
        public string SupportedLanguage { get; set; }

        /// <summary>
        /// List of type Pattern containing regex expressions with additional metadata.
        /// </summary>
        /// <value>List of type Pattern containing regex expressions with additional metadata.</value>
        [DataMember(Name = "patterns", EmitDefaultValue = false)]
        public List<Pattern> Patterns { get; set; }

        /// <summary>
        /// List of words to be returned as PII if found.
        /// </summary>
        /// <value>List of words to be returned as PII if found.</value>
        [DataMember(Name = "deny_list", EmitDefaultValue = false)]
        public List<string> DenyList { get; set; }

        /// <summary>
        /// List of words to be used to increase confidence if found in the vicinity of detected entities.
        /// </summary>
        /// <value>List of words to be used to increase confidence if found in the vicinity of detected entities.</value>
        [DataMember(Name = "context", EmitDefaultValue = false)]
        public List<string> Context { get; set; }

        /// <summary>
        /// The name of entity this ad hoc recognizer detects
        /// </summary>
        /// <value>The name of entity this ad hoc recognizer detects</value>
        [DataMember(Name = "supported_entity", EmitDefaultValue = false)]
        public string SupportedEntity { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PatternRecognizer {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  SupportedLanguage: ").Append(SupportedLanguage).Append("\n");
            sb.Append("  Patterns: ").Append(Patterns).Append("\n");
            sb.Append("  DenyList: ").Append(DenyList).Append("\n");
            sb.Append("  Context: ").Append(Context).Append("\n");
            sb.Append("  SupportedEntity: ").Append(SupportedEntity).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PatternRecognizer);
        }

        /// <summary>
        /// Returns true if PatternRecognizer instances are equal
        /// </summary>
        /// <param name="input">Instance of PatternRecognizer to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PatternRecognizer input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.SupportedLanguage == input.SupportedLanguage ||
                    (this.SupportedLanguage != null &&
                    this.SupportedLanguage.Equals(input.SupportedLanguage))
                ) && 
                (
                    this.Patterns == input.Patterns ||
                    this.Patterns != null &&
                    input.Patterns != null &&
                    this.Patterns.SequenceEqual(input.Patterns)
                ) && 
                (
                    this.DenyList == input.DenyList ||
                    this.DenyList != null &&
                    input.DenyList != null &&
                    this.DenyList.SequenceEqual(input.DenyList)
                ) && 
                (
                    this.Context == input.Context ||
                    this.Context != null &&
                    input.Context != null &&
                    this.Context.SequenceEqual(input.Context)
                ) && 
                (
                    this.SupportedEntity == input.SupportedEntity ||
                    (this.SupportedEntity != null &&
                    this.SupportedEntity.Equals(input.SupportedEntity))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.SupportedLanguage != null)
                    hashCode = hashCode * 59 + this.SupportedLanguage.GetHashCode();
                if (this.Patterns != null)
                    hashCode = hashCode * 59 + this.Patterns.GetHashCode();
                if (this.DenyList != null)
                    hashCode = hashCode * 59 + this.DenyList.GetHashCode();
                if (this.Context != null)
                    hashCode = hashCode * 59 + this.Context.GetHashCode();
                if (this.SupportedEntity != null)
                    hashCode = hashCode * 59 + this.SupportedEntity.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
