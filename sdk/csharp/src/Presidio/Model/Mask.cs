/*
 * Presidio
 *
 * Context aware, pluggable and customizable PII anonymization service for text and images.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: presidio@microsoft.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Presidio.Client.OpenAPIDateConverter;

namespace Presidio.Model
{
    /// <summary>
    /// Replace with a given character
    /// </summary>
    [DataContract(Name = "Mask")]
    public partial class Mask : IEquatable<Mask>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Mask" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Mask() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Mask" /> class.
        /// </summary>
        /// <param name="type">mask (required).</param>
        /// <param name="maskingChar">The replacement character (required).</param>
        /// <param name="charsToMask">The amount of characters that should be replaced (required).</param>
        /// <param name="fromEnd">Whether to mask the PII from it&#39;s end (default to false).</param>
        public Mask(string type = default(string), string maskingChar = default(string), int charsToMask = default(int), bool fromEnd = false)
        {
            // to ensure "type" is required (not null)
            this.Type = type ?? throw new ArgumentNullException("type is a required property for Mask and cannot be null");
            // to ensure "maskingChar" is required (not null)
            this.MaskingChar = maskingChar ?? throw new ArgumentNullException("maskingChar is a required property for Mask and cannot be null");
            this.CharsToMask = charsToMask;
            this.FromEnd = fromEnd;
        }

        /// <summary>
        /// mask
        /// </summary>
        /// <value>mask</value>
        [DataMember(Name = "type", IsRequired = true, EmitDefaultValue = false)]
        public string Type { get; set; }

        /// <summary>
        /// The replacement character
        /// </summary>
        /// <value>The replacement character</value>
        [DataMember(Name = "masking_char", IsRequired = true, EmitDefaultValue = false)]
        public string MaskingChar { get; set; }

        /// <summary>
        /// The amount of characters that should be replaced
        /// </summary>
        /// <value>The amount of characters that should be replaced</value>
        [DataMember(Name = "chars_to_mask", IsRequired = true, EmitDefaultValue = false)]
        public int CharsToMask { get; set; }

        /// <summary>
        /// Whether to mask the PII from it&#39;s end
        /// </summary>
        /// <value>Whether to mask the PII from it&#39;s end</value>
        [DataMember(Name = "from_end", EmitDefaultValue = true)]
        public bool FromEnd { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Mask {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  MaskingChar: ").Append(MaskingChar).Append("\n");
            sb.Append("  CharsToMask: ").Append(CharsToMask).Append("\n");
            sb.Append("  FromEnd: ").Append(FromEnd).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Mask);
        }

        /// <summary>
        /// Returns true if Mask instances are equal
        /// </summary>
        /// <param name="input">Instance of Mask to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Mask input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.MaskingChar == input.MaskingChar ||
                    (this.MaskingChar != null &&
                    this.MaskingChar.Equals(input.MaskingChar))
                ) && 
                (
                    this.CharsToMask == input.CharsToMask ||
                    this.CharsToMask.Equals(input.CharsToMask)
                ) && 
                (
                    this.FromEnd == input.FromEnd ||
                    this.FromEnd.Equals(input.FromEnd)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.MaskingChar != null)
                    hashCode = hashCode * 59 + this.MaskingChar.GetHashCode();
                hashCode = hashCode * 59 + this.CharsToMask.GetHashCode();
                hashCode = hashCode * 59 + this.FromEnd.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
