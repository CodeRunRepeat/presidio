/* 
 * Presidio
 *
 * Context aware, pluggable and customizable PII anonymization service for text and images.
 *
 * OpenAPI spec version: 2.0
 * Contact: presidio@microsoft.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;
using IO.Swagger.Client;
using IO.Swagger.Api;
using IO.Swagger.Model;

namespace IO.Swagger.Test
{
    /// <summary>
    ///  Class for testing DeanonymizerApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class DeanonymizerApiTests
    {
        private DeanonymizerApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new DeanonymizerApi();
            instance.Configuration.BasePath = "http://127.0.0.1:3000";
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {
        }

        /// <summary>
        /// Test an instance of DeanonymizerApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            Assert.IsInstanceOfType(typeof(DeanonymizerApi), instance, "instance is a DeanonymizerApi");
        }

        /// <summary>
        /// Test DeanonymizePost
        /// </summary>
        [Test]
        public void DeanonymizePostTest()
        {
            var decrypt = new Decrypt("decrypt", "3t6w9z$C&F)J@NcR");
            var deanonymizers = new Dictionary<string, object>() {{"PERSON", decrypt}};
            var anonymizerResult = new AnonymizerResult(start: 11, end: 55, entityType: "PERSON");
            var anonymizerResults = new List<AnonymizerResult>() {anonymizerResult};
            DeanonymizeRequest body = new DeanonymizeRequest(
                text: "My name is MnHePFVW1uQEWKNYRbc7c4AiFySIgh8XLiDq0n9w4qU=, you killed my father prepare to die.", deanonymizers: deanonymizers,
                anonymizerResults: anonymizerResults);
            var response = instance.DeanonymizePost(body);
            Assert.IsInstanceOf<DeanonymizeResponse>(response, "response is DeanonymizeResponse");
            Assert.IsTrue(response.Text == "My name is Inigo Montoya, you killed my father prepare to die.");
        }
    }
}