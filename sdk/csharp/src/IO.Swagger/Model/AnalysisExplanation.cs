/* 
 * Presidio
 *
 * Context aware, pluggable and customizable PII anonymization service for text and images.
 *
 * OpenAPI spec version: 2.0
 * Contact: presidio@microsoft.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// AnalysisExplanation
    /// </summary>
    [DataContract]
        public partial class AnalysisExplanation :  IEquatable<AnalysisExplanation>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AnalysisExplanation" /> class.
        /// </summary>
        /// <param name="recognizer">Name of recognizer that made the decision.</param>
        /// <param name="patternName">name of pattern (if decision was made by a PatternRecognizer).</param>
        /// <param name="pattern">Regex pattern that was applied (if PatternRecognizer).</param>
        /// <param name="originalScore">Recognizer&#x27;s confidence in result.</param>
        /// <param name="score">The PII detection score.</param>
        /// <param name="textualExplanation">Free text for describing a decision of a logic or model.</param>
        /// <param name="scoreContextImprovement">Difference from the original score.</param>
        /// <param name="supportiveContextWord">The context word which helped increase the score.</param>
        /// <param name="validationResult">Result of a validation (e.g. checksum).</param>
        public AnalysisExplanation(string recognizer = default(string), string patternName = default(string), string pattern = default(string), double? originalScore = default(double?), double? score = default(double?), string textualExplanation = default(string), double? scoreContextImprovement = default(double?), string supportiveContextWord = default(string), double? validationResult = default(double?))
        {
            this.Recognizer = recognizer;
            this.PatternName = patternName;
            this.Pattern = pattern;
            this.OriginalScore = originalScore;
            this.Score = score;
            this.TextualExplanation = textualExplanation;
            this.ScoreContextImprovement = scoreContextImprovement;
            this.SupportiveContextWord = supportiveContextWord;
            this.ValidationResult = validationResult;
        }
        
        /// <summary>
        /// Name of recognizer that made the decision
        /// </summary>
        /// <value>Name of recognizer that made the decision</value>
        [DataMember(Name="recognizer", EmitDefaultValue=false)]
        public string Recognizer { get; set; }

        /// <summary>
        /// name of pattern (if decision was made by a PatternRecognizer)
        /// </summary>
        /// <value>name of pattern (if decision was made by a PatternRecognizer)</value>
        [DataMember(Name="pattern_name", EmitDefaultValue=false)]
        public string PatternName { get; set; }

        /// <summary>
        /// Regex pattern that was applied (if PatternRecognizer)
        /// </summary>
        /// <value>Regex pattern that was applied (if PatternRecognizer)</value>
        [DataMember(Name="pattern", EmitDefaultValue=false)]
        public string Pattern { get; set; }

        /// <summary>
        /// Recognizer&#x27;s confidence in result
        /// </summary>
        /// <value>Recognizer&#x27;s confidence in result</value>
        [DataMember(Name="original_score", EmitDefaultValue=false)]
        public double? OriginalScore { get; set; }

        /// <summary>
        /// The PII detection score
        /// </summary>
        /// <value>The PII detection score</value>
        [DataMember(Name="score", EmitDefaultValue=false)]
        public double? Score { get; set; }

        /// <summary>
        /// Free text for describing a decision of a logic or model
        /// </summary>
        /// <value>Free text for describing a decision of a logic or model</value>
        [DataMember(Name="textual_explanation", EmitDefaultValue=false)]
        public string TextualExplanation { get; set; }

        /// <summary>
        /// Difference from the original score
        /// </summary>
        /// <value>Difference from the original score</value>
        [DataMember(Name="score_context_improvement", EmitDefaultValue=false)]
        public double? ScoreContextImprovement { get; set; }

        /// <summary>
        /// The context word which helped increase the score
        /// </summary>
        /// <value>The context word which helped increase the score</value>
        [DataMember(Name="supportive_context_word", EmitDefaultValue=false)]
        public string SupportiveContextWord { get; set; }

        /// <summary>
        /// Result of a validation (e.g. checksum)
        /// </summary>
        /// <value>Result of a validation (e.g. checksum)</value>
        [DataMember(Name="validation_result", EmitDefaultValue=false)]
        public double? ValidationResult { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AnalysisExplanation {\n");
            sb.Append("  Recognizer: ").Append(Recognizer).Append("\n");
            sb.Append("  PatternName: ").Append(PatternName).Append("\n");
            sb.Append("  Pattern: ").Append(Pattern).Append("\n");
            sb.Append("  OriginalScore: ").Append(OriginalScore).Append("\n");
            sb.Append("  Score: ").Append(Score).Append("\n");
            sb.Append("  TextualExplanation: ").Append(TextualExplanation).Append("\n");
            sb.Append("  ScoreContextImprovement: ").Append(ScoreContextImprovement).Append("\n");
            sb.Append("  SupportiveContextWord: ").Append(SupportiveContextWord).Append("\n");
            sb.Append("  ValidationResult: ").Append(ValidationResult).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AnalysisExplanation);
        }

        /// <summary>
        /// Returns true if AnalysisExplanation instances are equal
        /// </summary>
        /// <param name="input">Instance of AnalysisExplanation to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AnalysisExplanation input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Recognizer == input.Recognizer ||
                    (this.Recognizer != null &&
                    this.Recognizer.Equals(input.Recognizer))
                ) && 
                (
                    this.PatternName == input.PatternName ||
                    (this.PatternName != null &&
                    this.PatternName.Equals(input.PatternName))
                ) && 
                (
                    this.Pattern == input.Pattern ||
                    (this.Pattern != null &&
                    this.Pattern.Equals(input.Pattern))
                ) && 
                (
                    this.OriginalScore == input.OriginalScore ||
                    (this.OriginalScore != null &&
                    this.OriginalScore.Equals(input.OriginalScore))
                ) && 
                (
                    this.Score == input.Score ||
                    (this.Score != null &&
                    this.Score.Equals(input.Score))
                ) && 
                (
                    this.TextualExplanation == input.TextualExplanation ||
                    (this.TextualExplanation != null &&
                    this.TextualExplanation.Equals(input.TextualExplanation))
                ) && 
                (
                    this.ScoreContextImprovement == input.ScoreContextImprovement ||
                    (this.ScoreContextImprovement != null &&
                    this.ScoreContextImprovement.Equals(input.ScoreContextImprovement))
                ) && 
                (
                    this.SupportiveContextWord == input.SupportiveContextWord ||
                    (this.SupportiveContextWord != null &&
                    this.SupportiveContextWord.Equals(input.SupportiveContextWord))
                ) && 
                (
                    this.ValidationResult == input.ValidationResult ||
                    (this.ValidationResult != null &&
                    this.ValidationResult.Equals(input.ValidationResult))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Recognizer != null)
                    hashCode = hashCode * 59 + this.Recognizer.GetHashCode();
                if (this.PatternName != null)
                    hashCode = hashCode * 59 + this.PatternName.GetHashCode();
                if (this.Pattern != null)
                    hashCode = hashCode * 59 + this.Pattern.GetHashCode();
                if (this.OriginalScore != null)
                    hashCode = hashCode * 59 + this.OriginalScore.GetHashCode();
                if (this.Score != null)
                    hashCode = hashCode * 59 + this.Score.GetHashCode();
                if (this.TextualExplanation != null)
                    hashCode = hashCode * 59 + this.TextualExplanation.GetHashCode();
                if (this.ScoreContextImprovement != null)
                    hashCode = hashCode * 59 + this.ScoreContextImprovement.GetHashCode();
                if (this.SupportiveContextWord != null)
                    hashCode = hashCode * 59 + this.SupportiveContextWord.GetHashCode();
                if (this.ValidationResult != null)
                    hashCode = hashCode * 59 + this.ValidationResult.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
