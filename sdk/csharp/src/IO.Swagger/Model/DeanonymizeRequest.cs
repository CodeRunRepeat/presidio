/* 
 * Presidio
 *
 * Context aware, pluggable and customizable PII anonymization service for text and images.
 *
 * OpenAPI spec version: 2.0
 * Contact: presidio@microsoft.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// DeanonymizeRequest
    /// </summary>
    [DataContract]
        public partial class DeanonymizeRequest :  IEquatable<DeanonymizeRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DeanonymizeRequest" /> class.
        /// </summary>
        /// <param name="text">The anonymized text (required).</param>
        /// <param name="deanonymizers">Object where the key is DEFAULT or the ENTITY_TYPE and the value is decrypt since it is the only one supported (required).</param>
        /// <param name="anonymizerResults">Array of anonymized PIIs (required).</param>
        public DeanonymizeRequest(string text = default(string), Object deanonymizers = default(Object), List<AnonymizerResult> anonymizerResults = default(List<AnonymizerResult>))
        {
            // to ensure "text" is required (not null)
            if (text == null)
            {
                throw new InvalidDataException("text is a required property for DeanonymizeRequest and cannot be null");
            }
            else
            {
                this.Text = text;
            }
            // to ensure "deanonymizers" is required (not null)
            if (deanonymizers == null)
            {
                throw new InvalidDataException("deanonymizers is a required property for DeanonymizeRequest and cannot be null");
            }
            else
            {
                this.Deanonymizers = deanonymizers;
            }
            // to ensure "anonymizerResults" is required (not null)
            if (anonymizerResults == null)
            {
                throw new InvalidDataException("anonymizerResults is a required property for DeanonymizeRequest and cannot be null");
            }
            else
            {
                this.AnonymizerResults = anonymizerResults;
            }
        }
        
        /// <summary>
        /// The anonymized text
        /// </summary>
        /// <value>The anonymized text</value>
        [DataMember(Name="text", EmitDefaultValue=false)]
        public string Text { get; set; }

        /// <summary>
        /// Object where the key is DEFAULT or the ENTITY_TYPE and the value is decrypt since it is the only one supported
        /// </summary>
        /// <value>Object where the key is DEFAULT or the ENTITY_TYPE and the value is decrypt since it is the only one supported</value>
        [DataMember(Name="deanonymizers", EmitDefaultValue=false)]
        public Object Deanonymizers { get; set; }

        /// <summary>
        /// Array of anonymized PIIs
        /// </summary>
        /// <value>Array of anonymized PIIs</value>
        [DataMember(Name="anonymizer_results", EmitDefaultValue=false)]
        public List<AnonymizerResult> AnonymizerResults { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DeanonymizeRequest {\n");
            sb.Append("  Text: ").Append(Text).Append("\n");
            sb.Append("  Deanonymizers: ").Append(Deanonymizers).Append("\n");
            sb.Append("  AnonymizerResults: ").Append(AnonymizerResults).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DeanonymizeRequest);
        }

        /// <summary>
        /// Returns true if DeanonymizeRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of DeanonymizeRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DeanonymizeRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Text == input.Text ||
                    (this.Text != null &&
                    this.Text.Equals(input.Text))
                ) && 
                (
                    this.Deanonymizers == input.Deanonymizers ||
                    (this.Deanonymizers != null &&
                    this.Deanonymizers.Equals(input.Deanonymizers))
                ) && 
                (
                    this.AnonymizerResults == input.AnonymizerResults ||
                    this.AnonymizerResults != null &&
                    input.AnonymizerResults != null &&
                    this.AnonymizerResults.SequenceEqual(input.AnonymizerResults)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Text != null)
                    hashCode = hashCode * 59 + this.Text.GetHashCode();
                if (this.Deanonymizers != null)
                    hashCode = hashCode * 59 + this.Deanonymizers.GetHashCode();
                if (this.AnonymizerResults != null)
                    hashCode = hashCode * 59 + this.AnonymizerResults.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
