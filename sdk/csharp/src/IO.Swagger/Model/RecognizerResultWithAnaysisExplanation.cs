/* 
 * Presidio
 *
 * Context aware, pluggable and customizable PII anonymization service for text and images.
 *
 * OpenAPI spec version: 2.0
 * Contact: presidio@microsoft.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// RecognizerResultWithAnaysisExplanation
    /// </summary>
    [DataContract]
        public partial class RecognizerResultWithAnaysisExplanation : RecognizerResult,  IEquatable<RecognizerResultWithAnaysisExplanation>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RecognizerResultWithAnaysisExplanation" /> class.
        /// </summary>
        /// <param name="analysisExplanation">analysisExplanation.</param>
        public RecognizerResultWithAnaysisExplanation(AnalysisExplanation analysisExplanation = default(AnalysisExplanation), int? start = default(int?), int? end = default(int?), double? score = default(double?), string entityType = default(string)) : base(start, end, score, entityType)
        {
            this.AnalysisExplanation = analysisExplanation;
        }
        
        /// <summary>
        /// Gets or Sets AnalysisExplanation
        /// </summary>
        [DataMember(Name="analysis_explanation", EmitDefaultValue=false)]
        public AnalysisExplanation AnalysisExplanation { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class RecognizerResultWithAnaysisExplanation {\n");
            sb.Append("  ").Append(base.ToString().Replace("\n", "\n  ")).Append("\n");
            sb.Append("  AnalysisExplanation: ").Append(AnalysisExplanation).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public override string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as RecognizerResultWithAnaysisExplanation);
        }

        /// <summary>
        /// Returns true if RecognizerResultWithAnaysisExplanation instances are equal
        /// </summary>
        /// <param name="input">Instance of RecognizerResultWithAnaysisExplanation to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RecognizerResultWithAnaysisExplanation input)
        {
            if (input == null)
                return false;

            return base.Equals(input) && 
                (
                    this.AnalysisExplanation == input.AnalysisExplanation ||
                    (this.AnalysisExplanation != null &&
                    this.AnalysisExplanation.Equals(input.AnalysisExplanation))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = base.GetHashCode();
                if (this.AnalysisExplanation != null)
                    hashCode = hashCode * 59 + this.AnalysisExplanation.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
